#include <iostream>
#include <conio.h>
#include <vector>
#include <iomanip>
#include <string>
#include <Windows.h>
#include <fstream>
using namespace std;

//шаблон класса Stack
template <class T>
class Stack {
private:
	//поля класса
	struct {
		T item;        //элемент стека
		Stack* next;     //указатель на next
	};
	Stack* top = NULL;

public:
	//методы класса
	
	void set(T item) {      
		this->item = item;
	}
	void push() {              //ВВОД ЭЛЕМЕНТОВ

		Stack* pv = new Stack;
		pv->item = item;
		pv->next = top;
		top = pv;

	}
	void printStack() {      // ВЫВОДИМ СТЕК НА ЭКРАН
		if (isEmpty()) {
			cout << "вагон пуст";
		}
		Stack* pv = top;

		while (pv != NULL) {
			cout << pv->item << " ";
			pv = pv->next;
		}
		cout << "\n";
		delete pv;

	}

	T pop() { //УДАЛЕНИЕ ЭЛЕМЕНТА
		if (isEmpty()) {
			cout << "стек пуст" << endl;
		}
		else {
			T temp = top->item;
			Stack* pv = top;
			top = top->next;
			delete pv;
			return temp;
		}
	}
	void getStackSize() { //ПОЛУЧИТЬ РАЗМЕР СТЕКА
		int sz = 0;
		Stack* pv = top;

		while (pv != NULL)
		{
			sz++;
			pv = pv->next;
		}
		cout << sz << "\n";
		delete pv;
	}

	bool isEmpty() //ПРОВЕРКА НА ПУСТОТУ
	{
		return top ? false : true;
	}
	void infile(string source) { //ЧТЕНИЕ ДАННЫХ ИЗ ФАЙЛА
		ifstream file(source+".txt");
		if (file) {
			while (!file.eof()) {
				T elem;

				file >> elem;
				set(elem);
				push();

			}
		}
	}

	T split(T a, T b) { //РАЗДЕЛЕНИЕ ДАННЫХ НА ДВА ВАГОНА
		T elem = pop();
		if (elem == a) {
			return a;
		}
		else if (elem == b) {
			return b;
		}
			
	}
};


int main() {                                             //ГЛАВНАЯ МЕНЮШКА, УПРАВЛЯЕТ ПОСЛЕДОВАТЕЛЬНОСТЬЮ ВЫЗОВА ВСЕХ МЕТОДОВ КЛАССА
	setlocale(LC_ALL, "rus");
	// работаем с типом integer
	cout << "_______________INTEGER________________" << endl;
	Stack<int> TrainBase1, OneTrain1, TwoTrain1; 
	int a1=0, b1=1;
	string source1 = "integer";
	TrainBase1.infile(source1);
	cout << "Основной вагон: ";
	TrainBase1.printStack();
	cout << "Количество элементов: ";
	TrainBase1.getStackSize();
	while (!TrainBase1.isEmpty()) {
		int temp1 = TrainBase1.split(a1, b1);
		if (temp1 == a1) {
			OneTrain1.set(temp1); OneTrain1.push();
		}
		else{
			TwoTrain1.set(temp1); TwoTrain1.push();
		}
	}
	cout << endl;
	cout << "Сортировка по вагонам:" << endl;
	cout << "________________________________" << endl;
	cout << "Основной вагон: ";
	TrainBase1.printStack();
	cout << "Первый вагон: ";
	OneTrain1.printStack();
	cout << "Второй вагон: ";
	TwoTrain1.printStack();
	cout << endl << endl;

	//работаем с типом double
	cout << "________________DOUBLE________________" << endl;
	Stack<double> TrainBase2, OneTrain2, TwoTrain2;
	double a2 = 1.2, b2 = 1.3;
	string source2 = "double";
	TrainBase2.infile(source2);
	cout << "Основной вагон: ";
	TrainBase2.printStack();
	cout << "Количество элементов: ";
	TrainBase2.getStackSize();
	while (!TrainBase2.isEmpty()) {
		double temp2 = TrainBase2.split(a2, b2);
		if (temp2 == a2) {
			OneTrain2.set(temp2); OneTrain2.push();
		}
		else {
			TwoTrain2.set(temp2); TwoTrain2.push();
		}
	}
	cout << endl;
	cout << "Сортировка по вагонам:" << endl;
	cout << "________________________________" << endl;
	cout << "Основной вагон: ";
	TrainBase2.printStack();
	cout << "Первый вагон: ";
	OneTrain2.printStack();
	cout << "Второй вагон: ";
	TwoTrain2.printStack();
	cout << endl << endl;

	//работаем с типом char
	cout << "_________________CHAR__________________" << endl;
	Stack<char> TrainBase3, OneTrain3, TwoTrain3;
	char a3 = 'a', b3 = 'b';
	string source3 = "char";
	TrainBase3.infile(source3);
	cout << "Основной вагон: ";
	TrainBase3.printStack();
	cout << "Количество элементов: ";
	TrainBase3.getStackSize();
	while (!TrainBase3.isEmpty()) {
		char temp3 = TrainBase3.split(a3, b3);
		if (temp3 == a3) {
			OneTrain3.set(temp3); OneTrain3.push();
		}
		else {
			TwoTrain3.set(temp3); TwoTrain3.push();
		}
	}
	cout << endl;
	cout << "Сортировка по вагонам:" << endl;
	cout << "________________________________" << endl;
	cout << "Основной вагон: ";
	TrainBase3.printStack();
	cout << "Первый вагон: ";
	OneTrain3.printStack();
	cout << "Второй вагон: ";
	TwoTrain3.printStack();
	cout << endl << endl;

	system("pause>NULL");
	return 0;
}








